{"remainingRequest":"D:\\painel_covid\\node_modules\\babel-loader\\lib\\index.js!D:\\painel_covid\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\painel_covid\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\painel_covid\\src\\views\\Projeto\\components\\TreeInfectados.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\painel_covid\\src\\views\\Projeto\\components\\TreeInfectados.vue","mtime":1594648606898},{"path":"D:\\painel_covid\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\painel_covid\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\painel_covid\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\painel_covid\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICJEOi9wYWluZWxfY292aWQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgVHJlZU1hcEluZiBmcm9tICIuLi9jaGFydHMvVHJlZUNoYXJ0SW5mZWN0YWRvcy52dWUiOwppbXBvcnQgeyBEYXRhIH0gZnJvbSAiLi4vLi4vLi4vZnVuY3Rpb25zL2luZGV4LmpzIjsKdmFyIGFwaV9kYXRhID0gbmV3IERhdGEoKTsKZXhwb3J0IGRlZmF1bHQgewogIHByb3BzOiBbJ3RpdGxlJywgJ3RpbWUnLCAncmVnaW9ucyddLAogIGNvbXBvbmVudHM6IHsKICAgIFRyZWVNYXBJbmY6IFRyZWVNYXBJbmYKICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBkYXRhOiBudWxsLAogICAgICBkYXRhX2luZjogewogICAgICAgIGNvbG9yOiB0aGlzLmNvbG9yLAogICAgICAgIGRhdGE6IFtdCiAgICAgIH0sCiAgICAgIGZpbHRlcl9kYXRhOiBbXSwKICAgICAgbGFzdF9kYXRlOiBudWxsLAogICAgICBrZXk6IDAKICAgIH07CiAgfSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX3RoaXMuZ2V0X2RhdGEoX3RoaXMucmVnaW9ucyk7CgogICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUpOwogICAgfSkpKCk7CiAgfSwKICBtZXRob2RzOiB7CiAgICBnZXRfZGF0YTogZnVuY3Rpb24gZ2V0X2RhdGEocmVnaW9ucykgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICAgIHZhciBsYXN0X2RhdGUsIGRhdGEsIGZpbHRlcl9kYXRhLCBpLCBqOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gYXBpX2RhdGEuZ2V0X2xhc3RfZGF0ZSgpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBsYXN0X2RhdGUgPSBfY29udGV4dDIuc2VudC5kYXRhLnNwbGl0KCJUIilbMF07CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gYXBpX2RhdGEuZ2V0X3JlZ2lvbl9ieV9kYXRlKGxhc3RfZGF0ZSk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIGRhdGEgPSBfY29udGV4dDIuc2VudC5kYXRhOwogICAgICAgICAgICAgICAgX3RoaXMyLmRhdGEgPSBkYXRhOwogICAgICAgICAgICAgICAgZmlsdGVyX2RhdGEgPSBbXTsKCiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgcmVnaW9ucy5sZW5ndGg7IGorKykgewogICAgICAgICAgICAgICAgICAgIGlmIChkYXRhW2ldLnJlZ2lhbyA9PSByZWdpb25zW2pdKSB7CiAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJfZGF0YS5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgICAgQ2l0eTogZGF0YVtpXS5yZWdpYW8sCiAgICAgICAgICAgICAgICAgICAgICAgIENvdW50OiBkYXRhW2ldLm51bQogICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX3RoaXMyLmRhdGFfaW5mLmRhdGEgPSBmaWx0ZXJfZGF0YTsKICAgICAgICAgICAgICAgIF90aGlzMi5rZXkrKzsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMik7CiAgICAgIH0pKSgpOwogICAgfQogIH0sCiAgd2F0Y2g6IHsKICAgIHJlZ2lvbnM6IGZ1bmN0aW9uIHJlZ2lvbnModmFsKSB7CiAgICAgIHRoaXMuZ2V0X2RhdGEodmFsKTsKICAgIH0KICB9Cn07"},{"version":3,"sources":["TreeInfectados.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAaA,OAAA,UAAA,MAAA,mCAAA;AACA,SAAA,IAAA,QAAA,6BAAA;AAEA,IAAA,QAAA,GAAA,IAAA,IAAA,EAAA;AAEA,eAAA;AACA,EAAA,KAAA,EAAA,CAAA,OAAA,EAAA,MAAA,EAAA,SAAA,CADA;AAEA,EAAA,UAAA,EAAA;AAAA,IAAA,UAAA,EAAA;AAAA,GAFA;AAGA,EAAA,IAHA,kBAGA;AACA,WAAA;AACA,MAAA,IAAA,EAAA,IADA;AAEA,MAAA,QAAA,EAAA;AACA,QAAA,KAAA,EAAA,KAAA,KADA;AAEA,QAAA,IAAA,EAAA;AAFA,OAFA;AAMA,MAAA,WAAA,EAAA,EANA;AAOA,MAAA,SAAA,EAAA,IAPA;AAQA,MAAA,GAAA,EAAA;AARA,KAAA;AAUA,GAdA;AAeA,EAAA,OAfA,qBAeA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,cAAA,KAAA,CAAA,QAAA,CAAA,KAAA,CAAA,OAAA;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,GAjBA;AAkBA,EAAA,OAAA,EAAA;AACA,IAAA,QADA,oBACA,OADA,EACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACA,QAAA,CAAA,aAAA,EADA;;AAAA;AACA,gBAAA,SADA,kBACA,IADA,CACA,KADA,CACA,GADA,EACA,CADA;AAAA;AAAA,uBAEA,QAAA,CAAA,kBAAA,CAAA,SAAA,CAFA;;AAAA;AAEA,gBAAA,IAFA,kBAEA,IAFA;AAGA,gBAAA,MAAA,CAAA,IAAA,GAAA,IAAA;AACA,gBAAA,WAJA,GAIA,EAJA;;AAKA,qBAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,IAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,uBAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,OAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,wBAAA,IAAA,CAAA,CAAA,CAAA,CAAA,MAAA,IAAA,OAAA,CAAA,CAAA,CAAA,EAAA;AACA,sBAAA,WAAA,CAAA,IAAA,CAAA;AAAA,wBAAA,IAAA,EAAA,IAAA,CAAA,CAAA,CAAA,CAAA,MAAA;AAAA,wBAAA,KAAA,EAAA,IAAA,CAAA,CAAA,CAAA,CAAA;AAAA,uBAAA;AACA;AACA;AACA;;AACA,gBAAA,MAAA,CAAA,QAAA,CAAA,IAAA,GAAA,WAAA;AACA,gBAAA,MAAA,CAAA,GAAA;;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAfA,GAlBA;AAmCA,EAAA,KAAA,EAAA;AACA,IAAA,OADA,mBACA,GADA,EACA;AACA,WAAA,QAAA,CAAA,GAAA;AACA;AAHA;AAnCA,CAAA","sourcesContent":["<template>\r\n    <div>\r\n        <v-card flat outlined>\r\n            <v-card-title>\r\n                <span class=\"font-weight-light\">Regi√µes com mais casos</span>\r\n            </v-card-title>\r\n            <v-divider/>\r\n            <tree-map-inf v-bind:obj=\"data_inf\" :key=\"key\"></tree-map-inf>\r\n        </v-card>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport TreeMapInf from \"../charts/TreeChartInfectados.vue\";\r\nimport { Data } from \"../../../functions/index.js\";\r\n\r\nlet api_data = new Data();\r\n\r\nexport default {\r\n    props: [ 'title', 'time', 'regions' ],\r\n    components: { TreeMapInf },\r\n    data(){\r\n        return {\r\n            data: null,\r\n            data_inf: {\r\n                color: this.color,\r\n                data: []\r\n            },\r\n            filter_data: [],\r\n            last_date: null, \r\n            key: 0,\r\n        }\r\n    },\r\n    async created(){\r\n        this.get_data(this.regions)\r\n    },\r\n    methods: {\r\n        async get_data(regions){\r\n            let last_date = (await api_data.get_last_date()).data.split(\"T\")[0]\r\n            let data = ( await api_data.get_region_by_date(last_date) ).data\r\n            this.data = data\r\n            let filter_data = []\r\n            for(let i = 0; i < data.length; i++){\r\n                for(let j = 0; j < regions.length; j++){\r\n                    if(data[i].regiao == regions[j]){\r\n                        filter_data.push({ City: data[i].regiao, Count: data[i].num })\r\n                    }\r\n                }\r\n            }\r\n            this.data_inf.data=filter_data\r\n            this.key++\r\n        },\r\n    },\r\n    watch:{\r\n        regions(val){\r\n            this.get_data(val)\r\n        }\r\n    }\r\n    \r\n}\r\n</script>"],"sourceRoot":"src/views/Projeto/components"}]}