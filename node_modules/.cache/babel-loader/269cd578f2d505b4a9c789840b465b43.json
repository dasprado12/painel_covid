{"remainingRequest":"/home/prado/Desktop/uiot/painel_covid/node_modules/babel-loader/lib/index.js!/home/prado/Desktop/uiot/painel_covid/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/prado/Desktop/uiot/painel_covid/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/prado/Desktop/uiot/painel_covid/src/views/Projeto/maps/SimpleMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/prado/Desktop/uiot/painel_covid/src/views/Projeto/maps/SimpleMap.vue","mtime":1595868875835},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["SimpleMap.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"mapCss\">\n        <l-map :zoom=\"zoom\" :center=\"center\" @update:center=\"centerUpdate\" @update:zoom=\"zoomUpdate\">\n            <l-tile-layer url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"/>\n            <l-geo-json \n                v-for=\"item in geojson\" \n                :geojson=\"item\" \n                :options=\"item.style\" \n                :key=\"item.name\"\n                @click=\"showPopup(item)\"\n            >\n                <l-popup>\n                    <div >\n                        <v-card flat>\n                            <v-card-title><b>Região:</b> {{ item }}</v-card-title>\n                            <!-- <v-card-text>\n                                <b>Infectados:</b> {{ point.num }}\n                                <b>Óbitos:</b> {{ point.obitos }}\n                            </v-card-text> -->\n                        </v-card>\n                    </div>\n                </l-popup>\n            </l-geo-json>\n            <l-icon-default :image-path=\"'../../../assets/marker.png'\"></l-icon-default>\n            <span v-show=\"showPoints\">\n                <v-marker-cluster v-show=\"showPoints\">\n                    <l-marker v-for=\"point in filteredData\" :key=\"point.regiao\" :lat-lng=\"point.posicao\">\n                        <l-popup>\n                            <div @click=\"innerClick\">\n                                <v-card flat>\n                                    <v-card-title><b>Região:</b> {{ point.regiao }}</v-card-title>\n                                    <v-card-text>\n                                        <b>Infectados:</b> {{ point.num }}\n                                        <b>Óbitos:</b> {{ point.obitos }}\n                                    </v-card-text>\n                                </v-card>\n                            </div>\n                        </l-popup>\n                    </l-marker>\n                </v-marker-cluster>\n            </span>\n        </l-map>\n    </div>\n</template>\n\n<script>\nimport { Data } from \"../../../functions/index.js\"\nimport { latLng } from \"leaflet\";\nimport { InfoControl, ReferenceChart, ChoroplethLayer } from 'vue-choropleth'\nimport { LGeoJson, LMap, LTileLayer, LMarker, LPopup, LIconDefault } from \"vue2-leaflet\";\nimport Vue2LeafletMarkerCluster from 'vue2-leaflet-markercluster'\n\nlet api_data = new Data();\n\n\nexport default {\nname: \"SimpleMap\",\nprops: [ 'showPoints', 'type' ],  \ncomponents: { LGeoJson, LMap, LTileLayer, LMarker, LPopup, LIconDefault, 'v-marker-cluster': Vue2LeafletMarkerCluster,\n    'l-info-control': InfoControl, \n    'l-reference-chart': ReferenceChart, \n    'l-choropleth-layer': ChoroplethLayer \n},\ndata() {\n    return {\n        teste: null,\n        data: null,\n        filteredData: null,\n        geojson: null,\n        last_date: null,\n        zoom: 10,\n        colors: {\n            num: [ '#d4ffd7', '#8cdb92', '#8cdb92', '#1a8722', '#035209' ],\n            obitos: [ '#e8cccc', '#d48c8c', '#ba5252', '#9e2828', '#780e0e' ]\n        },\n        center: latLng(-15.793599, -47.814987),\n        url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n        currentZoom: 11.5,\n        currentCenter: latLng(47.41322, -1.219482),\n        range: {\n            \"num\": [ 40, 80, 120, 160 ],\n            \"obitos\":[ 5, 10, 15, 20 ]\n        },\n    }\n},\nasync created(){\n    this.created();\n    console.log(this.showPoints)\n},\nwatch: {\n    showPoints(val){\n        if(val == true){\n            this.filteredData = this.data\n        }\n        if(val == false){\n            this.filteredData = []\n        }\n    }\n},\nmethods: {\n    async created(){\n        const response = await fetch('https://raw.githubusercontent.com/dasprado12/Brasilia-RAs-georreferenciadas/master/Geojsons/All.geojson');\n        let geojson = await response.json() \n        let last_date = (await api_data.get_last_date()).data.split(\"T\")[0]\n        let data = (await api_data.get_region_by_date(last_date) ).data.map(function(data){\n            if(!data.latitude || !data.longitude){\n                data.latitude = \"1.1\"\n                data.longitude = \"1.1\"\n            }\n            data['posicao'] = { lat: data.latitude, lng: data.longitude}\n            return data\n        })\n        this.data = data\n        if(geojson){\n            for(let i = 0; i < geojson.length; i++){\n                for(let j = 0; j < data.length; j++){\n                    if(geojson[i].name == data[j].regiao){\n                        geojson[i]['data'] = { \"regiao\": data[j].regiao, \"num\": data[j].num, \"obitos\": data[j].obitos   }\n                        if(data[j][this.type] < this.range[this.type][0]){\n                            geojson[i]['style'] = { color: this.colors[this.type][0], weight: 1 }\n                        }else if(data[j][this.type] >= this.range[this.type][0] && data[j][this.type] < this.range[this.type][1] ){\n                            geojson[i]['style'] = { color: this.colors[this.type][1], weight: 1 }\n                        \n                        }else if(data[j][this.type] >= this.range[this.type][1] && data[j][this.type] < this.range[this.type][2]){\n                            geojson[i]['style'] = { color: this.colors[this.type][2], weight: 1 }\n                        \n                        }else if(data[j][this.type] >= this.range[this.type][2] && data[j][this.type] < this.range[this.type][3] ){\n                            geojson[i]['style'] = { color: this.colors[this.type][3], weight: 1 }\n                        \n                        }else if(data[j][this.type] >= this.range[this.type][3]){\n                            geojson[i]['style'] = { color: this.colors[this.type][4], weight: 1 }\n                        \n                        }else{\n                            geojson[i]['style'] = { color: \"#828282\" }\n                        }\n                    }\n                }\n            }\n        this.geojson = geojson\n        }else{\n            this.geojson = geojson\n        }\n    },\n    zoomUpdate(zoom) {\n        this.currentZoom = zoom;\n    },\n    centerUpdate(center) {\n        this.currentCenter = center;\n    },\n    showLongText() {\n        this.showParagraph = !this.showParagraph;\n    },\n    innerClick() {\n        alert(\"Click!\");\n    },\n    showPopup(val){\n        console.log(val)\n    }\n}\n};\n</script>\n\n<style scoped lang=\"scss\">\n@import \"~leaflet.markercluster/dist/MarkerCluster.css\";\n@import \"~leaflet.markercluster/dist/MarkerCluster.Default.css\";\n.charts-highcharts {\n}\n.-map {\n    width: 100%;\n    height: 800px;\n}\n.mapCss{\n    height: 500px; \n    width: 100%\n}\n</style>"],"sourceRoot":"src/views/Projeto/maps"}]}