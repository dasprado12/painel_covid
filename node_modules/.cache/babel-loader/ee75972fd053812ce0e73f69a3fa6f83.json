{"remainingRequest":"D:\\painel_covid\\node_modules\\babel-loader\\lib\\index.js!D:\\painel_covid\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\painel_covid\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\painel_covid\\src\\views\\Projeto\\maps\\SimpleMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\painel_covid\\src\\views\\Projeto\\maps\\SimpleMap.vue","mtime":1594941474255},{"path":"D:\\painel_covid\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\painel_covid\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\painel_covid\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\painel_covid\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["SimpleMap.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n<div id=\"map\" class=\"mapCss\">\r\n    <!-- <l-map :zoom=\"zoom\" :center=\"center\" @update:center=\"centerUpdate\" @update:zoom=\"zoomUpdate\">\r\n    <l-tile-layer url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"/>\r\n    <l-geo-json :geojson=\"geojson\"></l-geo-json>\r\n        <l-icon-default></l-icon-default>\r\n        <v-marker-cluster>\r\n            <l-marker v-for=\"point in data\" :key=\"point.regiao\" :lat-lng=\"point.posicao\">\r\n                <l-popup>\r\n                    <div @click=\"innerClick\">\r\n                        <v-card flat>\r\n                            <v-card-text>\r\n                                <b>Região:</b> {{ point.regiao }}\r\n                                <b>Infectados:</b> {{ point.num }}\r\n                                <b>Óbitos:</b> {{ point.obitos }}\r\n                            </v-card-text>\r\n                        </v-card>\r\n                    </div>\r\n                </l-popup>\r\n            </l-marker>\r\n        </v-marker-cluster>\r\n    </l-map> -->\r\n</div>\r\n</template>\r\n\r\n<script>\r\n// import { Data } from \"../../../functions/index.js\"\r\n// import { latLng } from \"leaflet\";\r\nimport * as L from \"leaflet\";\r\n\r\n// let api_data = new Data();\r\n\r\nexport default {\r\nname: \"Example\",\r\ndata() {\r\n    return {\r\n        data: null,\r\n        map:null,\r\n        // last_date: null,\r\n        tileLayer:null,\r\n        layers:[\r\n            {id:0,\r\n            active: true,\r\n            features:[],\r\n            }\r\n        ],\r\n        // geoLayer:null,\r\n        marker:null,\r\n        // zoom: 10,\r\n        // center: latLng(-15.793599, -47.814987),\r\n        // url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n        // currentZoom: 11.5,\r\n        // currentCenter: latLng(47.41322, -1.219482),\r\n        geojson: null\r\n    };\r\n},\r\nmounted(){\r\n    this.createMap();\r\n    this.manipulate();\r\n},\r\nasync created(){\r\n    this.list_data();\r\n    this.created();\r\n\r\n\r\n},\r\n\r\nmethods: {\r\n\r\n    async getIncidencia(geoName){\r\n        console.log(\"AQUI\")\r\n        console.log(geoName)\r\n        alert(geoName)\r\n\r\n\r\n    },\r\n    async addGeojson(){\r\n        let geo = this.geojson\r\n        let map = this.map\r\n        // let layer = this.geoLayer\r\n        let myStyle={\r\n            \"color\":\"#ffbaba\"\r\n        }\r\n\r\n        // let middle={\r\n        //     \"color\":\"#ff7b7b\"\r\n        // }\r\n\r\n        // let middleB={\r\n        //     \"color\":\"#ff5252\"\r\n        // }\r\n        // let grave={\r\n        //     \"color\":\"#ff0000\"\r\n        // }\r\n        // let muitoGrave={\r\n        //     \"color\":\"#a70000\"\r\n        // }\r\n        \r\n        // let incid;\r\n        \r\n       geo.features.forEach(function(geojson){\r\n           \r\n        //    let geoName= geojson.name\r\n//pegar o numero de incidencias\r\n// console.log(\"AQUI\")\r\n//             console.log(this.data)\r\n//                 this.data.forEach(function(point){\r\n//                     let name = point.regiao.replace(/\\s/g,'')\r\n//                     let nameReady = name.replace('/', \"-\")\r\n//                         if(geoName=== nameReady){\r\n//                             alert(\"Achei\");\r\n\r\n//                         incid = point.incidencia\r\n//                         }\r\n//                          else incid=0;\r\n//                 })\r\n\r\n        //    let myStyle;\r\n\r\n            // if (incid<5){\r\n            //     // myStyle = leve;\r\n            // }\r\n            // else{\r\n            //     myStyle = muitoGrave\r\n            // }\r\n        // layer.addData(geojson.features, {style: myStyle})\r\n        // console.log(incid)\r\n           L.geoJSON(geojson.features,{style: myStyle}).addTo(map)\r\n        })\r\n    },\r\n    async createMap(){\r\n            this.map = L.map('map').setView([-15.793599, -47.814987], 10);\r\n            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n    attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n}).addTo(this.map);\r\n      \r\n    },\r\n    async created(){\r\n        const response = await fetch('https://raw.githubusercontent.com/dasprado12/Brasilia-RAs-georreferenciadas/master/Geojsons/All.geojson');\r\n        this.geojson = await response.json();\r\n    },\r\n\r\n    async manipulate(){\r\n        let mapa = this.map\r\n        \r\n        let array=[]\r\n                let icon = new L.Icon.Default();\r\n                icon.options.shadowSize = [0, 0];\r\n        this.data.forEach(function(point){\r\n            // let mark = {\r\n            //         key: point.regiao,\r\n            //         type:\"marker\",\r\n            //         posicao: point.posicao,\r\n            //     }\r\n            let mark = L.marker(point.posicao).addTo(mapa);\r\n                array.push(mark)\r\n            //    console.log(mark)\r\n            //     console.log(mark)\r\n            // this.layers[0].features.push(mark)\r\n         \r\n        })\r\n        this.layers[0].features = array;\r\n    },\r\n    async list_data(){\r\n        // let last_date = (await api_data.get_last_date()).data.split(\"T\")[0]\r\n        // let data = (await api_data.get_region_by_date2(last_date) ).data\r\n        let data = [{\"_id\":\"5ec4225498bbbca607865cd6\",\"regiao\":\"Águas Claras\",\"latitude\":-15.835754999999999,\"longitude\":-48.023703999999995,\"num\":16,\"porcentagem\":9.4,\"incidencia\":9.38,\"obitos\":0,\"porcentagem obitos\":0,\"dataExtracao\":\"2020-03-26T00:00:00.000Z\"},{\"_id\":\"5ec4225498bbbca607865cd7\",\"regiao\":\"Recanto Das Emas\",\"latitude\":-15.916970000000001,\"longitude\":-48.101851,\"num\":0,\"porcentagem\":0,\"incidencia\":0,\"obitos\":0,\"porcentagem obitos\":0,\"dataExtracao\":\"2020-03-26T00:00:00.000Z\"},{\"_id\":\"5ec4225498bbbca607865cd8\",\"regiao\":\"Samambaia\",\"latitude\":-15.874647,\"longitude\":-48.101735,\"num\":2,\"porcentagem\":1.2,\"incidencia\":0.82,\"obitos\":0,\"porcentagem obitos\":0,\"dataExtracao\":\"2020-03-26T00:00:00.000Z\"}, {\"_id\":\"5ec4225498bbbca607865cde\",\"regiao\":\"Sudoeste/Octogonal\",\"latitude\":-15.791981,\"longitude\":-47.929973,\"num\":19,\"porcentagem\":11.1,\"incidencia\":34.38,\"obitos\":0,\"porcentagem obitos\":0,\"dataExtracao\":\"2020-03-26T00:00:00.000Z\"},{\"_id\":\"5ec4225498bbbca607865cf3\",\"regiao\":\"Jardim Botânico\",\"latitude\":-15.855691,\"longitude\":-47.809974,\"num\":3,\"porcentagem\":1.8,\"incidencia\":5.16,\"obitos\":0,\"porcentagem obitos\":0,\"dataExtracao\":\"2020-03-26T00:00:00.000Z\"}]\r\n        this.data = data.map(function(data){\r\n            if(!data.latitude || !data.longitude){\r\n                data.latitude = \"1.1\"\r\n                data.longitude = \"1.1\"\r\n            }\r\n            data['posicao'] = { lat: data.latitude.toString().replace(\",\", \".\"), lng: data.longitude.toString().replace(\",\", \".\")};\r\n          \r\n        })\r\n        // this.manipulate(data);\r\n        this.data = data\r\n    \r\n            \r\n\r\n    },\r\n    zoomUpdate(zoom) {\r\n    this.currentZoom = zoom;\r\n    },\r\n    centerUpdate(center) {\r\n    this.currentCenter = center;\r\n    },\r\n    showLongText() {\r\n    this.showParagraph = !this.showParagraph;\r\n    },\r\n    innerClick() {\r\n    alert(\"Click!\");\r\n    }\r\n},\r\n    watch:{\r\n        geojson: function(){\r\n            // let map = this.map\r\n            // this.geoLayer = L.geoJSON().addTo(map);\r\n            this.addGeojson();\r\n        }\r\n\r\n}\r\n};\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import \"~leaflet.markercluster/dist/MarkerCluster.css\";\r\n@import \"~leaflet.markercluster/dist/MarkerCluster.Default.css\";\r\n.charts-highcharts {\r\n}\r\n.-map {\r\n    width: 100%;\r\n    height: 800px;\r\n}\r\n.mapCss{\r\n    height: 500px; \r\n    width: 100%\r\n}\r\n</style>"],"sourceRoot":"src/views/Projeto/maps"}]}