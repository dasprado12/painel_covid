{"remainingRequest":"/home/prado/Desktop/uiot/painel_covid/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/prado/Desktop/uiot/painel_covid/src/views/Projeto/maps/SimpleMap.vue?vue&type=style&index=0&id=e9cad830&scoped=true&lang=scss&","dependencies":[{"path":"/home/prado/Desktop/uiot/painel_covid/src/views/Projeto/maps/SimpleMap.vue","mtime":1596825469538},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBpbXBvcnQgIn5sZWFmbGV0Lm1hcmtlcmNsdXN0ZXIvZGlzdC9NYXJrZXJDbHVzdGVyLmNzcyI7CkBpbXBvcnQgIn5sZWFmbGV0Lm1hcmtlcmNsdXN0ZXIvZGlzdC9NYXJrZXJDbHVzdGVyLkRlZmF1bHQuY3NzIjsKLmNoYXJ0cy1oaWdoY2hhcnRzIHsKfQouLW1hcCB7CiAgICB3aWR0aDogMTAwJTsKICAgIGhlaWdodDogODAwcHg7Cn0KLm1hcENzc3sKICAgIGhlaWdodDogNTAwcHg7IAogICAgd2lkdGg6IDEwMCUKfQouY2FyZENvbG9yewogICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI0MCwgMjQwLCAyNDApOwp9Ci5sZWdlbmRhewogICAgbWFyZ2luLWxlZnQ6IDMwcHg7CiAgICBtYXJnaW4tdG9wOiAzNTBweDsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIHotaW5kZXg6IDUwMDsKICAgIC8vIGNvbG9yOiByZ2IoMjAyLCAxMDksIDEwOSk7Cn0KCi5sZWdlbmRhLWNvcmVzewogICAgbWFyZ2luLWxlZnQ6IDg4JTsKICAgIG1hcmdpbi10b3A6IDM1MHB4OwogICAgcG9zaXRpb246IGFic29sdXRlOwogICAgei1pbmRleDogNTAwOwp9CgoudGV4dC1sZWdlbmR7CiAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICB6LWluZGV4OiA1MDA7Cn0KLnNwYWNvLXNpbXBsZXN7CiAgICBwYWRkaW5nLWxlZnQ6IDIwcHg7Cn0K"},{"version":3,"sources":["SimpleMap.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SimpleMap.vue","sourceRoot":"src/views/Projeto/maps","sourcesContent":["<template>\n    <div class=\"mapCss\">\n        <div class=\"legenda\">\n            <v-card elevation=\"5\" class=\"cardColor\">\n                <v-card-title>\n                    {{currentOption.name}}\n                </v-card-title>\n                <v-card-text>\n                    <span> Infectados: {{currentOption.num}} </span><br>\n                    <span> Óbitos: {{currentOption.obitos}} </span>\n                </v-card-text>\n            </v-card>\n        </div>\n        <div class=\"legenda-cores\">\n            <v-card flat color=\"transparent\">\n                <v-card-text>\n                    <div v-for=\"(item,idx) in legenda()\" :key=\"item\">\n                        <span v-if=\"idx==0\"> <v-badge :color=\"getColor(type, idx)\"/> <span class=\"spaco-simples\"/> 0 - {{item.menor-1}}  </span>\n                        <span v-if=\"idx>=1 && idx <=3\"> <v-badge :color=\"getColor(type, idx)\"/> <span class=\"spaco-simples\"/> {{item.maior}} - {{item.menor-1}}  </span>\n                        <span v-if=\"idx==4\"> <v-badge :color=\"getColor(type, idx)\"/> <span class=\"spaco-simples\"/> {{item.maior}} - maior  </span>\n                    </div>\n                </v-card-text>\n            </v-card>\n        </div>\n        <l-map :zoom=\"zoom\" :center=\"center\" @update:center=\"centerUpdate\" @update:zoom=\"zoomUpdate\">\n            <l-tile-layer url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"/>\n            <l-geo-json \n                v-for=\"item in geojson\" \n                :geojson=\"item\" \n                :options=\"item.style\" \n                :key=\"item.name\"\n                @mouseover=\"mouseOver(item)\"\n            />                \n            <l-icon-default :image-path=\"'../../../assets/marker.png'\"></l-icon-default>\n                <v-marker-cluster>\n                    <l-marker  v-for=\"point in filteredData\" :key=\"point.regiao\" :lat-lng=\"point.posicao\">\n                        <l-popup>\n                            <div @click=\"innerClick\">\n                                <v-card flat>\n                                    <v-card-title><b>Região:</b> {{ point.regiao }}</v-card-title>\n                                    <v-card-text>\n                                        <b>Infectados:</b> {{ point.num }}\n                                        <b>Óbitos:</b> {{ point.obitos }}\n                                    </v-card-text>\n                                </v-card>\n                            </div>\n                        </l-popup>\n                    </l-marker>\n                </v-marker-cluster>\n        </l-map>\n    </div>\n</template>\n\n<script>\nimport { Data } from \"../../../functions/index.js\"\nimport { latLng } from \"leaflet\";\nimport { LGeoJson, LMap, LTileLayer, LMarker, LPopup, LIconDefault } from \"vue2-leaflet\";\nimport Vue2LeafletMarkerCluster from 'vue2-leaflet-markercluster'\n\nlet api_data = new Data();\n\n\nexport default {\nname: \"SimpleMap\",\nprops: [ 'showPoints', 'type' ],  \ncomponents: { LGeoJson, LMap, LTileLayer, LMarker, LPopup, LIconDefault, 'v-marker-cluster': Vue2LeafletMarkerCluster,\n},\ndata() {\n    return {\n        data: null,\n        filteredData: null,\n        geojson: null,\n        last_date: null,\n        zoom: 10,\n        colors: {\n            num:    [ '#c7f0cf', '#8ed49b', '#62b371', '#39964a', '#177529' ],\n            obitos: [ '#f2e6e6', '#edbbbb', '#d67c7c', '#b33e3e', '#660404' ]\n        },\n        center: latLng(-15.793599, -47.814987),\n        currentZoom: 11.5,\n        currentCenter: latLng(47.41322, -1.219482),\n        range: {\n            num: [ 1000, 2000, 3000, 4000 ],\n            obitos:[ 10, 20, 30, 40 ]\n        },\n        currentOption: {\n            name: 'Região',\n            num: '',\n            obitos: ''\n        }\n    }\n},\nasync mounted(){\n    this.create();\n},\nmethods: {\n    async create(){\n        const response = await fetch('https://raw.githubusercontent.com/dasprado12/Brasilia-RAs-georreferenciadas/master/Geojsons/All.geojson');\n        let geojson = await response.json() \n        let last_date = (await api_data.get_last_date()).data.split(\"T\")[0]\n        this.range = (await api_data.get_incid()).data.map(function(item){return ~~item})\n        let data = (await api_data.get_region_by_date(last_date) ).data.map(function(data){\n            if(!data.latitude || !data.longitude){\n                data.latitude = \"1.1\"\n                data.longitude = \"1.1\"\n            }\n            data['posicao'] = { lat: data.latitude, lng: data.longitude}\n            return data\n        })\n        this.data = data\n        for(let i = 0; i < geojson.length; i++){\n            for(let j = 0; j < data.length; j++){\n                if(geojson[i].name == data[j].regiao){\n                    geojson[i]['data'] = { \"regiao\": data[j].regiao, \"num\": data[j].num, \"obitos\": data[j].obitos   }\n                    if(data[j][this.type] < this.range[this.type][0]){\n                        geojson[i]['style'] = { color: this.colors[this.type][0], weight: 2 }\n                    }else if(data[j][this.type] >= this.range[this.type][0] && data[j][this.type] < this.range[this.type][1] ){\n                        geojson[i]['style'] = { color: this.colors[this.type][1], weight: 2 }\n                    \n                    }else if(data[j][this.type] >= this.range[this.type][1] && data[j][this.type] < this.range[this.type][2]){\n                        geojson[i]['style'] = { color: this.colors[this.type][2], weight: 2 }\n                    \n                    }else if(data[j][this.type] >= this.range[this.type][2] && data[j][this.type] < this.range[this.type][3] ){\n                        geojson[i]['style'] = { color: this.colors[this.type][3], weight: 2 }\n                    \n                    }else if(data[j][this.type] >= this.range[this.type][3]){\n                        geojson[i]['style'] = { color: this.colors[this.type][4], weight: 2 }\n                    \n                    }else{\n                        geojson[i]['style'] = { color: \"#828282\" }\n                    }\n                }\n            }\n        }\n        this.geojson = geojson\n    },\n    legenda(){\n        let ret = this.range[this.type]\n        let arr_ret = []\n        for(let i = 0; i < ret.length; i++){\n            if(i==0){\n                arr_ret.push({'menor': ret[i]})\n            }else if(i == 1){\n                arr_ret.push({'maior': ret[i-1], 'menor': ret[i]})\n            }else if(i == 2){\n                arr_ret.push({'maior': ret[i-1], 'menor': ret[i]})\n            }else if(i == 3){\n                arr_ret.push({'maior': ret[i-1], 'menor': ret[i]})\n                arr_ret.push({'maior': ret[i]})\n            }\n        }\n        return arr_ret\n    },\n    getColor(tipo, posicao){\n        return this.colors[this.type][posicao]\n    },\n    zoomUpdate(zoom) {\n        this.currentZoom = zoom;\n    },\n    centerUpdate(center) {\n        this.currentCenter = center;\n    },\n    showLongText() {\n        this.showParagraph = !this.showParagraph;\n    },\n    innerClick() {\n        alert(\"Click!\");\n    },\n    showPopup(val){\n        alert(val)\n    },\n    mouseOver(item){\n        this.setCurrent(item)\n    },\n    setCurrent(item){\n        this.currentOption.name = item.data.regiao\n        this.currentOption.num = item.data.num\n        this.currentOption.obitos = item.data.obitos\n    }\n}\n};\n</script>\n\n<style scoped lang=\"scss\">\n@import \"~leaflet.markercluster/dist/MarkerCluster.css\";\n@import \"~leaflet.markercluster/dist/MarkerCluster.Default.css\";\n.charts-highcharts {\n}\n.-map {\n    width: 100%;\n    height: 800px;\n}\n.mapCss{\n    height: 500px; \n    width: 100%\n}\n.cardColor{\n    background-color: rgb(240, 240, 240);\n}\n.legenda{\n    margin-left: 30px;\n    margin-top: 350px;\n    position: absolute;\n    z-index: 500;\n    // color: rgb(202, 109, 109);\n}\n\n.legenda-cores{\n    margin-left: 88%;\n    margin-top: 350px;\n    position: absolute;\n    z-index: 500;\n}\n\n.text-legend{\n    position: absolute;\n    z-index: 500;\n}\n.spaco-simples{\n    padding-left: 20px;\n}\n</style>"]}]}