{"remainingRequest":"/home/prado/Desktop/uiot/painel_covid/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/prado/Desktop/uiot/painel_covid/src/views/Projeto/maps/SimpleMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/prado/Desktop/uiot/painel_covid/src/views/Projeto/maps/SimpleMap.vue","mtime":1595856076030},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IERhdGEgfSBmcm9tICIuLi8uLi8uLi9mdW5jdGlvbnMvaW5kZXguanMiCmltcG9ydCB7IGxhdExuZyB9IGZyb20gImxlYWZsZXQiOwppbXBvcnQgeyBMR2VvSnNvbiwgTE1hcCwgTFRpbGVMYXllciwgTE1hcmtlciwgTFBvcHVwLCBMSWNvbkRlZmF1bHQgfSBmcm9tICJ2dWUyLWxlYWZsZXQiOwppbXBvcnQgVnVlMkxlYWZsZXRNYXJrZXJDbHVzdGVyIGZyb20gJ3Z1ZTItbGVhZmxldC1tYXJrZXJjbHVzdGVyJwoKbGV0IGFwaV9kYXRhID0gbmV3IERhdGEoKTsKCgpleHBvcnQgZGVmYXVsdCB7Cm5hbWU6ICJTaW1wbGVNYXAiLApwcm9wczogWyAnc2hvd1BvaW50cycsICd0eXBlJyBdLCAgCmNvbXBvbmVudHM6IHsgCiAgICAgICAgTEdlb0pzb24sIAogICAgICAgIExNYXAsIAogICAgICAgIExUaWxlTGF5ZXIsIAogICAgICAgIExNYXJrZXIsIAogICAgICAgIExQb3B1cCwgCiAgICAgICAgTEljb25EZWZhdWx0LCAndi1tYXJrZXItY2x1c3Rlcic6IFZ1ZTJMZWFmbGV0TWFya2VyQ2x1c3RlciAKICAgIH0sCmRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICAgIGRhdGE6IG51bGwsCiAgICAgICAgZmlsdGVyZWREYXRhOiBbXSwKICAgICAgICBnZW9qc29uOiBudWxsLAogICAgICAgIGxhc3RfZGF0ZTogbnVsbCwKICAgICAgICB6b29tOiAxMCwKICAgICAgICBjb2xvcnM6IHsKICAgICAgICAgICAgbnVtOiBbICcjY2NmZmQxJywgJyM4ZGUwOTYnLCAnIzRjYmE1OCcsICcjNGNiYTU4JywgJyMwZjg1MWInIF0sCiAgICAgICAgICAgIG9iaXRvczogWyAnI2ZmYzJjMicsICcjZTA4MDgwJywgJyNjMjRjNGMnLCAnI2FiMjcyNycsICcjODcwYjBiJyBdCiAgICAgICAgfSwKICAgICAgICBjZW50ZXI6IGxhdExuZygtMTUuNzkzNTk5LCAtNDcuODE0OTg3KSwKICAgICAgICB1cmw6ICdodHRwczovL3tzfS50aWxlLm9wZW5zdHJlZXRtYXAub3JnL3t6fS97eH0ve3l9LnBuZycsCiAgICAgICAgY3VycmVudFpvb206IDExLjUsCiAgICAgICAgY3VycmVudENlbnRlcjogbGF0TG5nKDQ3LjQxMzIyLCAtMS4yMTk0ODIpLAogICAgICAgIHJhbmdlOiB7CiAgICAgICAgICAgICJudW0iOiBbIDQwLCA4MCwgMTIwLCAxNjAgXSwKICAgICAgICAgICAgIm9iaXRvcyI6WyA0MCwgODAsIDEyMCwgMTYwIF0KICAgICAgICB9CiAgICB9Owp9LAp3YXRjaDp7CiAgICBzaG93UG9pbnRzKHZhbCl7CiAgICAgICAgaWYodmFsID09IHRydWUpewogICAgICAgICAgICB0aGlzLmZpbHRlcmVkRGF0YSA9IHRoaXMuZGF0YQogICAgICAgIH0KICAgICAgICBpZih2YWwgPT0gZmFsc2UpewogICAgICAgICAgICB0aGlzLmZpbHRlcmVkRGF0YSA9IFtdCiAgICAgICAgfQogICAgfQp9LAphc3luYyBjcmVhdGVkKCl7CiAgICB0aGlzLmNyZWF0ZWQoKTsKfSwKbWV0aG9kczogewogICAgYXN5bmMgY3JlYXRlZCgpewogICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9kYXNwcmFkbzEyL0JyYXNpbGlhLVJBcy1nZW9ycmVmZXJlbmNpYWRhcy9tYXN0ZXIvR2VvanNvbnMvQWxsLmdlb2pzb24nKTsKICAgICAgICBsZXQgZ2VvanNvbiA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKSAKICAgICAgICBsZXQgbGFzdF9kYXRlID0gKGF3YWl0IGFwaV9kYXRhLmdldF9sYXN0X2RhdGUoKSkuZGF0YS5zcGxpdCgiVCIpWzBdCiAgICAgICAgbGV0IGRhdGEgPSAoYXdhaXQgYXBpX2RhdGEuZ2V0X3JlZ2lvbl9ieV9kYXRlMihsYXN0X2RhdGUpICkuZGF0YS5tYXAoZnVuY3Rpb24oZGF0YSl7CiAgICAgICAgICAgIGlmKCFkYXRhLmxhdGl0dWRlIHx8ICFkYXRhLmxvbmdpdHVkZSl7CiAgICAgICAgICAgICAgICBkYXRhLmxhdGl0dWRlID0gIjEuMSIKICAgICAgICAgICAgICAgIGRhdGEubG9uZ2l0dWRlID0gIjEuMSIKICAgICAgICAgICAgfQogICAgICAgICAgICBkYXRhWydwb3NpY2FvJ10gPSB7IGxhdDogZGF0YS5sYXRpdHVkZSwgbG5nOiBkYXRhLmxvbmdpdHVkZX0KICAgICAgICAgICAgcmV0dXJuIGRhdGEKICAgICAgICB9KQogICAgICAgIHRoaXMuZGF0YSA9IGRhdGEKICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgZ2VvanNvbi5sZW5ndGg7IGkrKyl7CiAgICAgICAgICAgIGZvcihsZXQgaiA9IDA7IGogPCBkYXRhLmxlbmd0aDsgaisrKXsKICAgICAgICAgICAgICAgIGlmKGdlb2pzb25baV0ubmFtZSA9PSBkYXRhW2pdLnJlZ2lhbyl7CiAgICAgICAgICAgICAgICAgICAgaWYoZGF0YVtqXVt0aGlzLnR5cGVdIDwgdGhpcy5yYW5nZVt0aGlzLnR5cGVdWzBdKXsKICAgICAgICAgICAgICAgICAgICAgICAgZ2VvanNvbltpXVsnc3R5bGUnXSA9IHsgY29sb3I6IHRoaXMuY29sb3JzW3RoaXMudHlwZV1bMF0sIHdlaWdodDogMSB9CiAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYoZGF0YVtqXVt0aGlzLnR5cGVdID49IHRoaXMucmFuZ2VbdGhpcy50eXBlXVswXSAmJiBkYXRhW2pdW3RoaXMudHlwZV0gPCB0aGlzLnJhbmdlW3RoaXMudHlwZV1bMV0gKXsKICAgICAgICAgICAgICAgICAgICAgICAgZ2VvanNvbltpXVsnc3R5bGUnXSA9IHsgY29sb3I6IHRoaXMuY29sb3JzW3RoaXMudHlwZV1bMV0sIHdlaWdodDogMSB9CiAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYoZGF0YVtqXVt0aGlzLnR5cGVdID49IHRoaXMucmFuZ2VbdGhpcy50eXBlXVsxXSAmJiBkYXRhW2pdW3RoaXMudHlwZV0gPCB0aGlzLnJhbmdlW3RoaXMudHlwZV1bMl0pewogICAgICAgICAgICAgICAgICAgICAgICBnZW9qc29uW2ldWydzdHlsZSddID0geyBjb2xvcjogdGhpcy5jb2xvcnNbdGhpcy50eXBlXVsyXSwgd2VpZ2h0OiAxIH0KICAgICAgICAgICAgICAgICAgICB9ZWxzZSBpZihkYXRhW2pdW3RoaXMudHlwZV0gPj0gdGhpcy5yYW5nZVt0aGlzLnR5cGVdWzJdICYmIGRhdGFbal1bdGhpcy50eXBlXSA8IHRoaXMucmFuZ2VbdGhpcy50eXBlXVszXSApewogICAgICAgICAgICAgICAgICAgICAgICBnZW9qc29uW2ldWydzdHlsZSddID0geyBjb2xvcjogdGhpcy5jb2xvcnNbdGhpcy50eXBlXVszXSwgd2VpZ2h0OiAxIH0KICAgICAgICAgICAgICAgICAgICB9ZWxzZSBpZihkYXRhW2pdW3RoaXMudHlwZV0gPj0gdGhpcy5yYW5nZVt0aGlzLnR5cGVdWzNdKXsKICAgICAgICAgICAgICAgICAgICAgICAgZ2VvanNvbltpXVsnc3R5bGUnXSA9IHsgY29sb3I6IHRoaXMuY29sb3JzW3RoaXMudHlwZV1bNF0sIHdlaWdodDogMSB9CiAgICAgICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgICAgIGdlb2pzb25baV1bJ3N0eWxlJ10gPSB7IGNvbG9yOiAiIzgyODI4MiIgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0aGlzLmdlb2pzb24gPSBnZW9qc29uCiAgICB9LAogICAgem9vbVVwZGF0ZSh6b29tKSB7CiAgICAgICAgdGhpcy5jdXJyZW50Wm9vbSA9IHpvb207CiAgICB9LAogICAgY2VudGVyVXBkYXRlKGNlbnRlcikgewogICAgICAgIHRoaXMuY3VycmVudENlbnRlciA9IGNlbnRlcjsKICAgIH0sCiAgICBzaG93TG9uZ1RleHQoKSB7CiAgICAgICAgdGhpcy5zaG93UGFyYWdyYXBoID0gIXRoaXMuc2hvd1BhcmFncmFwaDsKICAgIH0sCiAgICBpbm5lckNsaWNrKCkgewogICAgICAgIGFsZXJ0KCJDbGljayEiKTsKICAgIH0KfQp9Owo="},{"version":3,"sources":["SimpleMap.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SimpleMap.vue","sourceRoot":"src/views/Projeto/maps","sourcesContent":["<template>\n    <div class=\"mapCss\">\n        <l-map :zoom=\"zoom\" :center=\"center\" @update:center=\"centerUpdate\" @update:zoom=\"zoomUpdate\">\n        <l-tile-layer url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"/>\n        <span v-for=\"item in geojson\" :key=\"item\">\n            <l-geo-json :geojson=\"item\" :options=\"item.style\" ></l-geo-json>\n        </span> \n            <l-icon-default :image-path=\"'../../../assets/marker.png'\"></l-icon-default>\n            <v-marker-cluster>\n                <l-marker v-show=\"showPoints\" v-for=\"point in data\" :key=\"point.regiao\" :lat-lng=\"point.posicao\">\n                    <l-popup>\n                        <div @click=\"innerClick\">\n                            <v-card flat>\n                                <v-card-text>\n                                    <b>Região:</b> {{ point.regiao }}\n                                    <b>Infectados:</b> {{ point.num }}\n                                    <b>Óbitos:</b> {{ point.obitos }}\n                                </v-card-text>\n                            </v-card>\n                        </div>\n                    </l-popup>\n                </l-marker>\n            </v-marker-cluster>\n        </l-map>\n    </div>\n</template>\n\n<script>\nimport { Data } from \"../../../functions/index.js\"\nimport { latLng } from \"leaflet\";\nimport { LGeoJson, LMap, LTileLayer, LMarker, LPopup, LIconDefault } from \"vue2-leaflet\";\nimport Vue2LeafletMarkerCluster from 'vue2-leaflet-markercluster'\n\nlet api_data = new Data();\n\n\nexport default {\nname: \"SimpleMap\",\nprops: [ 'showPoints', 'type' ],  \ncomponents: { \n        LGeoJson, \n        LMap, \n        LTileLayer, \n        LMarker, \n        LPopup, \n        LIconDefault, 'v-marker-cluster': Vue2LeafletMarkerCluster \n    },\ndata() {\n    return {\n        data: null,\n        filteredData: [],\n        geojson: null,\n        last_date: null,\n        zoom: 10,\n        colors: {\n            num: [ '#ccffd1', '#8de096', '#4cba58', '#4cba58', '#0f851b' ],\n            obitos: [ '#ffc2c2', '#e08080', '#c24c4c', '#ab2727', '#870b0b' ]\n        },\n        center: latLng(-15.793599, -47.814987),\n        url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n        currentZoom: 11.5,\n        currentCenter: latLng(47.41322, -1.219482),\n        range: {\n            \"num\": [ 40, 80, 120, 160 ],\n            \"obitos\":[ 40, 80, 120, 160 ]\n        }\n    };\n},\nwatch:{\n    showPoints(val){\n        if(val == true){\n            this.filteredData = this.data\n        }\n        if(val == false){\n            this.filteredData = []\n        }\n    }\n},\nasync created(){\n    this.created();\n},\nmethods: {\n    async created(){\n        const response = await fetch('https://raw.githubusercontent.com/dasprado12/Brasilia-RAs-georreferenciadas/master/Geojsons/All.geojson');\n        let geojson = await response.json() \n        let last_date = (await api_data.get_last_date()).data.split(\"T\")[0]\n        let data = (await api_data.get_region_by_date2(last_date) ).data.map(function(data){\n            if(!data.latitude || !data.longitude){\n                data.latitude = \"1.1\"\n                data.longitude = \"1.1\"\n            }\n            data['posicao'] = { lat: data.latitude, lng: data.longitude}\n            return data\n        })\n        this.data = data\n        for(let i = 0; i < geojson.length; i++){\n            for(let j = 0; j < data.length; j++){\n                if(geojson[i].name == data[j].regiao){\n                    if(data[j][this.type] < this.range[this.type][0]){\n                        geojson[i]['style'] = { color: this.colors[this.type][0], weight: 1 }\n                    }else if(data[j][this.type] >= this.range[this.type][0] && data[j][this.type] < this.range[this.type][1] ){\n                        geojson[i]['style'] = { color: this.colors[this.type][1], weight: 1 }\n                    }else if(data[j][this.type] >= this.range[this.type][1] && data[j][this.type] < this.range[this.type][2]){\n                        geojson[i]['style'] = { color: this.colors[this.type][2], weight: 1 }\n                    }else if(data[j][this.type] >= this.range[this.type][2] && data[j][this.type] < this.range[this.type][3] ){\n                        geojson[i]['style'] = { color: this.colors[this.type][3], weight: 1 }\n                    }else if(data[j][this.type] >= this.range[this.type][3]){\n                        geojson[i]['style'] = { color: this.colors[this.type][4], weight: 1 }\n                    }else{\n                        geojson[i]['style'] = { color: \"#828282\" }\n                    }\n                }\n            }\n        }\n        this.geojson = geojson\n    },\n    zoomUpdate(zoom) {\n        this.currentZoom = zoom;\n    },\n    centerUpdate(center) {\n        this.currentCenter = center;\n    },\n    showLongText() {\n        this.showParagraph = !this.showParagraph;\n    },\n    innerClick() {\n        alert(\"Click!\");\n    }\n}\n};\n</script>\n\n<style scoped lang=\"scss\">\n@import \"~leaflet.markercluster/dist/MarkerCluster.css\";\n@import \"~leaflet.markercluster/dist/MarkerCluster.Default.css\";\n.charts-highcharts {\n}\n.-map {\n    width: 100%;\n    height: 800px;\n}\n.mapCss{\n    height: 500px; \n    width: 100%\n}\n</style>"]}]}