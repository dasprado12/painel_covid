{"remainingRequest":"/home/prado/Desktop/uiot/painel_covid/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/prado/Desktop/uiot/painel_covid/src/views/Projeto/components/SimpleMap.vue?vue&type=style&index=0&id=05ea2ad2&scoped=true&lang=scss&","dependencies":[{"path":"/home/prado/Desktop/uiot/painel_covid/src/views/Projeto/components/SimpleMap.vue","mtime":1595862175477},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQGltcG9ydCAifmxlYWZsZXQubWFya2VyY2x1c3Rlci9kaXN0L01hcmtlckNsdXN0ZXIuY3NzIjsKQGltcG9ydCAifmxlYWZsZXQubWFya2VyY2x1c3Rlci9kaXN0L01hcmtlckNsdXN0ZXIuRGVmYXVsdC5jc3MiOwouY2hhcnRzLWhpZ2hjaGFydHMgewp9Ci4tbWFwIHsKICAgIHdpZHRoOiAxMDAlOwogICAgaGVpZ2h0OiA4MDBweDsKfQoubWFwQ3NzewogICAgaGVpZ2h0OiA1MDBweDsgCiAgICB3aWR0aDogMTAwJQp9Cg=="},{"version":3,"sources":["SimpleMap.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SimpleMap.vue","sourceRoot":"src/views/Projeto/components","sourcesContent":["<template>\n    <div id=\"map\" class=\"mapCss\">\n    </div>\n</template>\n\n<script>\nimport { Data } from \"../../../functions/index.js\"\nimport * as L from \"leaflet\";\nlet api_data = new Data()\n\nexport default {\n    props: [ 'date' ],\n    name: \"Example\",\n    data() {\n        return {\n            map:null,\n            tileLayer:null,\n            layers:[\n                {id:0,\n                active: true,\n                features:[],\n                }\n            ],\n            marker:null,\n            geojson: null,\n            numId: 0\n        };\n    },\n    mounted(){\n        this.createMap();\n        this.manipulate();\n    },\n    async created(){\n\n        this.list_data();\n        this.created();\n    },\n    computed: {\n        data(){\n            return [{\"_id\":\"5ec4225498bbbca607865cd6\",\"regiao\":\"Águas Claras\",\"latitude\":-15.835754999999999,\"longitude\":-48.023703999999995,\"num\":16,\"porcentagem\":9.4,\"incidencia\":10.38,\"obitos\":0,\"porcentagem obitos\":0,\"dataExtracao\":\"2020-03-26T00:00:00.000Z\"},{\"_id\":\"5ec4225498bbbca607865cd7\",\"regiao\":\"Recanto Das Emas\",\"latitude\":-15.916970000000001,\"longitude\":-48.101851,\"num\":0,\"porcentagem\":0,\"incidencia\":0,\"obitos\":0,\"porcentagem obitos\":0,\"dataExtracao\":\"2020-03-26T00:00:00.000Z\"},{\"_id\":\"5ec4225498bbbca607865cd8\",\"regiao\":\"Samambaia\",\"latitude\":-15.874647,\"longitude\":-48.101735,\"num\":2,\"porcentagem\":1.2,\"incidencia\":0.82,\"obitos\":0,\"porcentagem obitos\":0,\"dataExtracao\":\"2020-03-26T00:00:00.000Z\"}, {\"_id\":\"5ec4225498bbbca607865cde\",\"regiao\":\"Sudoeste/Octogonal\",\"latitude\":-15.791981,\"longitude\":-47.929973,\"num\":19,\"porcentagem\":11.1,\"incidencia\":34.38,\"obitos\":0,\"porcentagem obitos\":0,\"dataExtracao\":\"2020-03-26T00:00:00.000Z\"},{\"_id\":\"5ec4225498bbbca607865cf3\",\"regiao\":\"Jardim Botânico\",\"latitude\":-15.855691,\"longitude\":-47.809974,\"num\":3,\"porcentagem\":1.8,\"incidencia\":5.16,\"obitos\":0,\"porcentagem obitos\":0,\"dataExtracao\":\"2020-03-26T00:00:00.000Z\"},{\"_id\":\"5ec4225498bbbca607865cd9\",\"regiao\":\"Taguatinga\",\"latitude\":-15.829303,\"longitude\":-48.055925,\"num\":6,\"porcentagem\":3.5,\"incidencia\":6.88,\"obitos\":0,\"porcentagem obitos\":0,\"dataExtracao\":\"2020-03-26T00:00:00.000Z\"}]\n        }\n    },\n    methods: {\n        getIncidencia(geoName, data){\n            let incid\n                data.forEach(function(point){\n                        let name = point.regiao.replace(/\\s/g,'')\n                        let nameReady = name.replace('/', \"-\")\n                            if(geoName=== nameReady){\n                                alert(geoName);\n                            incid = point.incidencia\n                            return incid\n                            }\n                            else{ incid = 0}\n                    })\n                    return incid;\n        },\n        async addGeojson(){\n            let geo = this.geojson\n            let map = this.map\n            let myStyle\n            let data = this.data\n            let leve={\n                \"color\":\"#ffbaba\",\n                \"fillColor\":\"#ffbaba\",\n                \"opacity\":\"0.2\"\n            }\n            let middle={\n                \"color\":\"#ff7b7b\",\n                \"fillOpacity\":\"0.8\"\n            }\n            let muitoGrave={\n                \"color\":\"#a70000\",\n                \"fillColor\":\"#a70000\",\n                \"fillOpacity\":\"0.8\"\n            }\n            let incid=0;\n            geo.features.forEach(function(geojson){\n            let geoName= geojson.name\n            console.log(incid)\n                data.forEach(function(point){\n                    let name = point.regiao.replace(/\\s/g,'')\n                    let nameReady = name.replace('/', \"-\")\n                        if(geoName=== nameReady){\n                        incid = point.incidencia\n                        }\n                })\n                if (parseFloat(incid) <= 5){\n                    myStyle = leve;\n                }\n                else if(parseFloat(incid) <= 10){\n                    // alert(geoName)\n                    myStyle =middle;\n                }\n                else{\n                    myStyle = muitoGrave\n                }\n                // layer.addData(geojson.features, {style: myStyle})\n                incid=0;\n                console.log(incid)\n                L.geoJSON(geojson.features,{style: myStyle}).addTo(map)\n            })\n        },\n        async createMap(){\n            this.map = L.map('map').setView([-15.793599, -47.814987], 10);\n            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n                attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n            }).addTo(this.map);\n        },\n        async created(){\n            const response = await fetch('https://raw.githubusercontent.com/dasprado12/Brasilia-RAs-georreferenciadas/master/Geojsons/All.geojson');\n            this.geojson = await response.json();\n        },\n        async manipulate(){\n            let mapa = this.map\n            let array=[]\n                    let icon = new L.Icon.Default();\n                    icon.options.shadowSize = [0, 0];\n            this.data.forEach(function(point){\n                // let mark = {\n                //         key: point.regiao,\n                //         type:\"marker\",\n                //         posicao: point.posicao,\n                //     }\n                let mark = L.marker(point.posicao).addTo(mapa);\n                    array.push(mark)\n                    console.log(mark)\n                // this.layers[0].features.push(mark)\n            })\n            this.layers[0].features = array;\n        },\n        async list_data(){\n            let last_date = (await api_data.get_last_date()).data.split(\"T\")[0]\n            let data = (await api_data.get_region_by_date2(last_date) ).data\n            this.data = data.map(function(data){\n                if(!data.latitude || !data.longitude){\n                    data.latitude = \"1.1\"\n                    data.longitude = \"1.1\"\n                }\n                data['posicao'] = { lat: data.latitude.toString().replace(\",\", \".\"), lng: data.longitude.toString().replace(\",\", \".\")};\n            })\n            // this.manipulate(data);\n            this.data = data\n        },\n        zoomUpdate(zoom) {\n            this.currentZoom = zoom;\n        },\n        centerUpdate(center) {\n            this.currentCenter = center;\n        },\n        showLongText() {\n            this.showParagraph = !this.showParagraph;\n        },\n        innerClick() {\n            alert(\"Click!\");\n        }\n    },\n    watch:{\n        geojson: function(){\n            // let map = this.map\n            // this.geoLayer = L.geoJSON().addTo(map);\n            this.addGeojson();\n        }\n    }\n};\n</script>\n\n<style scoped lang=\"scss\">\n@import \"~leaflet.markercluster/dist/MarkerCluster.css\";\n@import \"~leaflet.markercluster/dist/MarkerCluster.Default.css\";\n.charts-highcharts {\n}\n.-map {\n    width: 100%;\n    height: 800px;\n}\n.mapCss{\n    height: 500px; \n    width: 100%\n}\n</style>"]}]}