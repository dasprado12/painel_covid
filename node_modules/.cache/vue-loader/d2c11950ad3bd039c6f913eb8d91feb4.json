{"remainingRequest":"/home/prado/Desktop/uiot/painel_covid/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/prado/Desktop/uiot/painel_covid/src/views/Projeto/components/TreeInfectados.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/prado/Desktop/uiot/painel_covid/src/views/Projeto/components/TreeInfectados.vue","mtime":1594414027907},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/cache-loader/dist/cjs.js","mtime":1593699361554},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/babel-loader/lib/index.js","mtime":1593699361522},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/vuetify-loader/lib/loader.js","mtime":1593699362786},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/cache-loader/dist/cjs.js","mtime":1593699361554},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/vue-loader/lib/index.js","mtime":1593699362726}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBUcmVlTWFwSW5mIGZyb20gIi4uL2NoYXJ0cy9UcmVlQ2hhcnRJbmZlY3RhZG9zLnZ1ZSI7CmltcG9ydCB7IERhdGEgfSBmcm9tICIuLi8uLi8uLi9mdW5jdGlvbnMvaW5kZXguanMiOwoKbGV0IGFwaV9kYXRhID0gbmV3IERhdGEoKTsKCmV4cG9ydCBkZWZhdWx0IHsKICAgIHByb3BzOiBbICd0aXRsZScsICd0aW1lJywgJ3JlZ2lvbnMnIF0sCiAgICBjb21wb25lbnRzOiB7IFRyZWVNYXBJbmYgfSwKICAgIGRhdGEoKXsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBkYXRhOiBudWxsLAogICAgICAgICAgICBkYXRhX2luZjogewogICAgICAgICAgICAgICAgY29sb3I6IHRoaXMuY29sb3IsCiAgICAgICAgICAgICAgICBkYXRhOiBbXQogICAgICAgICAgICB9LAogICAgICAgICAgICBmaWx0ZXJfZGF0YTogW10sCiAgICAgICAgICAgIGxhc3RfZGF0ZTogbnVsbCwgCiAgICAgICAgICAgIGtleTogMCwKICAgICAgICB9CiAgICB9LAogICAgYXN5bmMgY3JlYXRlZCgpewogICAgICAgIHRoaXMuZ2V0X2RhdGEodGhpcy5yZWdpb25zKQogICAgfSwKICAgIG1ldGhvZHM6IHsKICAgICAgICBhc3luYyBnZXRfZGF0YShyZWdpb25zKXsKICAgICAgICAgICAgbGV0IGxhc3RfZGF0ZSA9IChhd2FpdCBhcGlfZGF0YS5nZXRfbGFzdF9kYXRlKCkpLmRhdGEuc3BsaXQoIlQiKVswXQogICAgICAgICAgICBsZXQgZGF0YSA9ICggYXdhaXQgYXBpX2RhdGEuZ2V0X3JlZ2lvbl9ieV9kYXRlKGxhc3RfZGF0ZSkgKS5kYXRhCiAgICAgICAgICAgIHRoaXMuZGF0YSA9IGRhdGEKICAgICAgICAgICAgbGV0IGZpbHRlcl9kYXRhID0gW10KICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspewogICAgICAgICAgICAgICAgZm9yKGxldCBqID0gMDsgaiA8IHJlZ2lvbnMubGVuZ3RoOyBqKyspewogICAgICAgICAgICAgICAgICAgIGlmKGRhdGFbaV0ucmVnaWFvID09IHJlZ2lvbnNbal0pewogICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJfZGF0YS5wdXNoKHsgQ2l0eTogZGF0YVtpXS5yZWdpYW8sIENvdW50OiBkYXRhW2ldLm51bSB9KQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLmRhdGFfaW5mLmRhdGE9ZmlsdGVyX2RhdGEKICAgICAgICAgICAgdGhpcy5rZXkrKwogICAgICAgIH0sCiAgICB9LAogICAgd2F0Y2g6ewogICAgICAgIHJlZ2lvbnModmFsKXsKICAgICAgICAgICAgdGhpcy5nZXRfZGF0YSh2YWwpCiAgICAgICAgfQogICAgfQogICAgCn0K"},{"version":3,"sources":["TreeInfectados.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAaA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"TreeInfectados.vue","sourceRoot":"src/views/Projeto/components","sourcesContent":["<template>\n    <div>\n        <v-card flat outlined>\n            <v-card-title>\n                <span class=\"font-weight-light\">Regi√µes com mais casos</span>\n            </v-card-title>\n            <v-divider/>\n            <tree-map-inf v-bind:obj=\"data_inf\" :key=\"key\"></tree-map-inf>\n        </v-card>\n    </div>\n</template>\n\n<script>\nimport TreeMapInf from \"../charts/TreeChartInfectados.vue\";\nimport { Data } from \"../../../functions/index.js\";\n\nlet api_data = new Data();\n\nexport default {\n    props: [ 'title', 'time', 'regions' ],\n    components: { TreeMapInf },\n    data(){\n        return {\n            data: null,\n            data_inf: {\n                color: this.color,\n                data: []\n            },\n            filter_data: [],\n            last_date: null, \n            key: 0,\n        }\n    },\n    async created(){\n        this.get_data(this.regions)\n    },\n    methods: {\n        async get_data(regions){\n            let last_date = (await api_data.get_last_date()).data.split(\"T\")[0]\n            let data = ( await api_data.get_region_by_date(last_date) ).data\n            this.data = data\n            let filter_data = []\n            for(let i = 0; i < data.length; i++){\n                for(let j = 0; j < regions.length; j++){\n                    if(data[i].regiao == regions[j]){\n                        filter_data.push({ City: data[i].regiao, Count: data[i].num })\n                    }\n                }\n            }\n            this.data_inf.data=filter_data\n            this.key++\n        },\n    },\n    watch:{\n        regions(val){\n            this.get_data(val)\n        }\n    }\n    \n}\n</script>"]}]}