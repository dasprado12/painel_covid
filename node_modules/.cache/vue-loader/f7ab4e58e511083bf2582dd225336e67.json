{"remainingRequest":"/home/prado/Desktop/uiot/painel_covid/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/prado/Desktop/uiot/painel_covid/src/views/Projeto/maps/SimpleMap.vue?vue&type=style&index=0&id=88b04a50&scoped=true&lang=scss&","dependencies":[{"path":"/home/prado/Desktop/uiot/painel_covid/src/views/Projeto/maps/SimpleMap.vue","mtime":1595262410884},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/prado/Desktop/uiot/painel_covid/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpAaW1wb3J0ICJ+bGVhZmxldC5tYXJrZXJjbHVzdGVyL2Rpc3QvTWFya2VyQ2x1c3Rlci5jc3MiOwpAaW1wb3J0ICJ+bGVhZmxldC5tYXJrZXJjbHVzdGVyL2Rpc3QvTWFya2VyQ2x1c3Rlci5EZWZhdWx0LmNzcyI7Ci5jaGFydHMtaGlnaGNoYXJ0cyB7Cn0KLi1tYXAgewogICAgd2lkdGg6IDEwMCU7CiAgICBoZWlnaHQ6IDgwMHB4Owp9Ci5tYXBDc3N7CiAgICBoZWlnaHQ6IDUwMHB4OyAKICAgIHdpZHRoOiAxMDAlCn0K"},{"version":3,"sources":["SimpleMap.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SimpleMap.vue","sourceRoot":"src/views/Projeto/maps","sourcesContent":["<template>\n<div id=\"map\" class=\"mapCss\">\n    <!-- <l-map :zoom=\"zoom\" :center=\"center\" @update:center=\"centerUpdate\" @update:zoom=\"zoomUpdate\">\n    <l-tile-layer url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"/>\n    <l-geo-json :geojson=\"geojson\"></l-geo-json>\n        <l-icon-default></l-icon-default>\n        <v-marker-cluster>\n            <l-marker v-for=\"point in data\" :key=\"point.regiao\" :lat-lng=\"point.posicao\">\n                <l-popup>\n                    <div @click=\"innerClick\">\n                        <v-card flat>\n                            <v-card-text>\n                                <b>Região:</b> {{ point.regiao }}\n                                <b>Infectados:</b> {{ point.num }}\n                                <b>Óbitos:</b> {{ point.obitos }}\n                            </v-card-text>\n                        </v-card>\n                    </div>\n                </l-popup>\n            </l-marker>\n        </v-marker-cluster>\n    </l-map> -->\n</div>\n</template>\n\n<script>\n// import { Data } from \"../../../functions/index.js\"\n// import { latLng } from \"leaflet\";\nimport * as L from \"leaflet\";\n\n// let api_data = new Data();\n\nexport default {\nname: \"Example\",\ndata() {\n    return {\n        data: null,\n        map:null,\n        // last_date: null,\n        tileLayer:null,\n        layers:[\n            {id:0,\n            active: true,\n            features:[],\n            }\n        ],\n        // geoLayer:null,\n        marker:null,\n        // zoom: 10,\n        // center: latLng(-15.793599, -47.814987),\n        // url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n        // currentZoom: 11.5,\n        // currentCenter: latLng(47.41322, -1.219482),\n        geojson: null\n    };\n},\nmounted(){\n    this.createMap();\n    this.manipulate();\n},\nasync created(){\n    this.list_data();\n    this.created();\n\n\n},\nmethods: {\n\n    getIncidencia(geoName, data){\n    \n        let incid\n            data.forEach(function(point){\n                    let name = point.regiao.replace(/\\s/g,'')\n                    let nameReady = name.replace('/', \"-\")\n                        if(geoName=== nameReady){\n                            alert(geoName);\n\n                        incid = point.incidencia\n                        return incid\n                    \n                        }\n                        else{ incid = 0}\n                    \n                })\n\n                return incid;\n\n\n    },\n    async addGeojson(){\n        let geo = this.geojson\n        let map = this.map\n        // let layer = this.geoLayer\n        let myStyle\n        let data = this.data\n      \n                let leve={\n            \"color\":\"#ffbaba\",\n            \"fillColor\":\"#ffbaba\",\n            \"opacity\":\"0.2\"\n\n        }\n        let middle={\n            \"color\":\"#ff7b7b\",\n            \"fillOpacity\":\"0.8\"\n\n        }\n\n        // let middleB={\n        //     \"color\":\"#ff5252\"\n        // }\n        // let grave={\n        //     \"color\":\"#ff0000\"\n        // }\n        let muitoGrave={\n            \"color\":\"#a70000\",\n            \"fillColor\":\"#a70000\",\n            \"fillOpacity\":\"0.8\"\n        }\n        \n        let incid=0;\n\n       geo.features.forEach(function(geojson){\n           \n           let geoName= geojson.name\n        //    incid= esse.getIncidencia(geoName, data)\n           console.log(\"oooooo\")\n           console.log(incid)\n//pegar o numero de incidencias\n// console.log(\"AQUI\")\n                data.forEach(function(point){\n                    let name = point.regiao.replace(/\\s/g,'')\n                    let nameReady = name.replace('/', \"-\")\n                        if(geoName=== nameReady){\n\n                        incid = point.incidencia\n \n                        }\n                })\n\n                                    \n\n        //    let myStyle;\n\n            if (parseFloat(incid) <= 5){\n                myStyle = leve;\n            }\n            else if(parseFloat(incid) <= 10){\n                alert(geoName)\n                myStyle =middle;\n            }\n            else{\n                myStyle = muitoGrave\n            }\n        // layer.addData(geojson.features, {style: myStyle})\n        incid=0;\n        console.log(incid)\n           L.geoJSON(geojson.features,{style: myStyle}).addTo(map)\n        })\n    },\n    async createMap(){\n            this.map = L.map('map').setView([-15.793599, -47.814987], 10);\n            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n}).addTo(this.map);\n      \n    },\n    async created(){\n        const response = await fetch('https://raw.githubusercontent.com/dasprado12/Brasilia-RAs-georreferenciadas/master/Geojsons/All.geojson');\n        this.geojson = await response.json();\n    },\n\n    async manipulate(){\n        let mapa = this.map\n        \n        let array=[]\n                let icon = new L.Icon.Default();\n                icon.options.shadowSize = [0, 0];\n        this.data.forEach(function(point){\n            // let mark = {\n            //         key: point.regiao,\n            //         type:\"marker\",\n            //         posicao: point.posicao,\n            //     }\n            let mark = L.marker(point.posicao).addTo(mapa);\n                array.push(mark)\n            //    console.log(mark)\n            //     console.log(mark)\n            // this.layers[0].features.push(mark)\n         \n        })\n        this.layers[0].features = array;\n    },\n    async list_data(){\n        // let last_date = (await api_data.get_last_date()).data.split(\"T\")[0]\n        // let data = (await api_data.get_region_by_date2(last_date) ).data\n        let data = [{\"_id\":\"5ec4225498bbbca607865cd6\",\"regiao\":\"Águas Claras\",\"latitude\":-15.835754999999999,\"longitude\":-48.023703999999995,\"num\":16,\"porcentagem\":9.4,\"incidencia\":10.38,\"obitos\":0,\"porcentagem obitos\":0,\"dataExtracao\":\"2020-03-26T00:00:00.000Z\"},{\"_id\":\"5ec4225498bbbca607865cd7\",\"regiao\":\"Recanto Das Emas\",\"latitude\":-15.916970000000001,\"longitude\":-48.101851,\"num\":0,\"porcentagem\":0,\"incidencia\":0,\"obitos\":0,\"porcentagem obitos\":0,\"dataExtracao\":\"2020-03-26T00:00:00.000Z\"},{\"_id\":\"5ec4225498bbbca607865cd8\",\"regiao\":\"Samambaia\",\"latitude\":-15.874647,\"longitude\":-48.101735,\"num\":2,\"porcentagem\":1.2,\"incidencia\":0.82,\"obitos\":0,\"porcentagem obitos\":0,\"dataExtracao\":\"2020-03-26T00:00:00.000Z\"}, {\"_id\":\"5ec4225498bbbca607865cde\",\"regiao\":\"Sudoeste/Octogonal\",\"latitude\":-15.791981,\"longitude\":-47.929973,\"num\":19,\"porcentagem\":11.1,\"incidencia\":34.38,\"obitos\":0,\"porcentagem obitos\":0,\"dataExtracao\":\"2020-03-26T00:00:00.000Z\"},{\"_id\":\"5ec4225498bbbca607865cf3\",\"regiao\":\"Jardim Botânico\",\"latitude\":-15.855691,\"longitude\":-47.809974,\"num\":3,\"porcentagem\":1.8,\"incidencia\":5.16,\"obitos\":0,\"porcentagem obitos\":0,\"dataExtracao\":\"2020-03-26T00:00:00.000Z\"},{\"_id\":\"5ec4225498bbbca607865cd9\",\"regiao\":\"Taguatinga\",\"latitude\":-15.829303,\"longitude\":-48.055925,\"num\":6,\"porcentagem\":3.5,\"incidencia\":6.88,\"obitos\":0,\"porcentagem obitos\":0,\"dataExtracao\":\"2020-03-26T00:00:00.000Z\"}]\n        this.data = data.map(function(data){\n            if(!data.latitude || !data.longitude){\n                data.latitude = \"1.1\"\n                data.longitude = \"1.1\"\n            }\n            data['posicao'] = { lat: data.latitude.toString().replace(\",\", \".\"), lng: data.longitude.toString().replace(\",\", \".\")};\n          \n        })\n        // this.manipulate(data);\n        this.data = data\n    \n            \n\n    },\n    zoomUpdate(zoom) {\n    this.currentZoom = zoom;\n    },\n    centerUpdate(center) {\n    this.currentCenter = center;\n    },\n    showLongText() {\n    this.showParagraph = !this.showParagraph;\n    },\n    innerClick() {\n    alert(\"Click!\");\n    }\n},\n    watch:{\n        geojson: function(){\n            // let map = this.map\n            // this.geoLayer = L.geoJSON().addTo(map);\n            this.addGeojson();\n        }\n\n}\n};\n</script>\n\n<style scoped lang=\"scss\">\n@import \"~leaflet.markercluster/dist/MarkerCluster.css\";\n@import \"~leaflet.markercluster/dist/MarkerCluster.Default.css\";\n.charts-highcharts {\n}\n.-map {\n    width: 100%;\n    height: 800px;\n}\n.mapCss{\n    height: 500px; \n    width: 100%\n}\n</style>"]}]}